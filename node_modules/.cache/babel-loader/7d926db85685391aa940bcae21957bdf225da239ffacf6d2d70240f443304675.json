{"ast":null,"code":"var _jsxFileName = \"/home/matthew/Developer/ga/unit_3/projects/movie-app/src/components/Review.jsx\";\nimport { useController } from '../Controller';\nimport reviewService from '../services/reviewService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Review(_ref) {\n  let {\n    review\n  } = _ref;\n  async function deleteReview(id) {\n    try {\n      await reviewService.deleteReview(id);\n      const indexToRemove = reviews.findIndex(review => review._id === id);\n      if (indexToRemove) {\n        const reviewCopy = [...reviews];\n        reviewCopy.splice(indexToRemove, 1);\n        setReviews([...reviewCopy]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [review.author, \" - \", review.body]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = Review;\nvar _c;\n$RefreshReg$(_c, \"Review\");","map":{"version":3,"names":["useController","reviewService","jsxDEV","_jsxDEV","Fragment","_Fragment","Review","_ref","review","deleteReview","id","indexToRemove","reviews","findIndex","_id","reviewCopy","splice","setReviews","error","console","children","author","body","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/matthew/Developer/ga/unit_3/projects/movie-app/src/components/Review.jsx"],"sourcesContent":["import { useController } from '../Controller'\nimport reviewService from '../services/reviewService'\n\nexport default function Review({ review }) {\n  async function deleteReview(id) {\n    try {\n      await reviewService.deleteReview(id)\n      const indexToRemove = reviews.findIndex((review) => review._id === id)\n      if (indexToRemove) {\n        const reviewCopy = [...reviews]\n        reviewCopy.splice(indexToRemove, 1)\n        setReviews([...reviewCopy])\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n  return (\n    <>\n      <li>\n        <p>\n          {review.author} - {review.body}\n        </p>\n      </li>\n    </>\n  )\n}\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,eAAe;AAC7C,OAAOC,aAAa,MAAM,2BAA2B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErD,eAAe,SAASC,MAAMA,CAAAC,IAAA,EAAa;EAAA,IAAZ;IAAEC;EAAO,CAAC,GAAAD,IAAA;EACvC,eAAeE,YAAYA,CAACC,EAAE,EAAE;IAC9B,IAAI;MACF,MAAMT,aAAa,CAACQ,YAAY,CAACC,EAAE,CAAC;MACpC,MAAMC,aAAa,GAAGC,OAAO,CAACC,SAAS,CAAEL,MAAM,IAAKA,MAAM,CAACM,GAAG,KAAKJ,EAAE,CAAC;MACtE,IAAIC,aAAa,EAAE;QACjB,MAAMI,UAAU,GAAG,CAAC,GAAGH,OAAO,CAAC;QAC/BG,UAAU,CAACC,MAAM,CAACL,aAAa,EAAE,CAAC,CAAC;QACnCM,UAAU,CAAC,CAAC,GAAGF,UAAU,CAAC,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF;EACA,oBACEf,OAAA,CAAAE,SAAA;IAAAe,QAAA,eACEjB,OAAA;MAAAiB,QAAA,eACEjB,OAAA;QAAAiB,QAAA,GACGZ,MAAM,CAACa,MAAM,EAAC,KAAG,EAACb,MAAM,CAACc,IAAI;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAC5B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACD,iBACJ;AAEP;AAACC,EAAA,GAvBuBrB,MAAM;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\nclass ReviewService {\n  constructor() {\n    this.baseURL = 'http://localhost:3001/api/reviews';\n  }\n  cosntructor() {\n    this.instance = axios.create({\n      baseUEL: this.baseURL\n    });\n    this.initializeResponseInterceptor();\n  }\n  initializeResponseInterceptor() {\n    this.instance.interceptors.response.use(this.handleResponse, this.handleError);\n  }\n  handleResponse(_ref) {\n    let {\n      data\n    } = _ref;\n    console.log(data);\n    return data;\n  }\n  handleError(error) {\n    throw error;\n  }\n  async getAllReviews() {\n    return await this.isntance.get('/');\n  }\n  async createReview(review) {\n    return await this.instance.post('/', {\n      body: review.body,\n      author: review.author\n    });\n  }\n  async deleteReview(id) {\n    return await this.instance.delete(`/${id}`);\n  }\n  async updateReview(id, review) {\n    return await this.instance.put('/', {\n      body: review.body,\n      author: review.author\n    });\n  }\n}\nconst reviewService = new ReviewService();\nexport default reviewService;","map":{"version":3,"names":["axios","ReviewService","constructor","baseURL","cosntructor","instance","create","baseUEL","initializeResponseInterceptor","interceptors","response","use","handleResponse","handleError","_ref","data","console","log","error","getAllReviews","isntance","get","createReview","review","post","body","author","deleteReview","id","delete","updateReview","put","reviewService"],"sources":["/home/matthew/Developer/ga/unit_3/projects/movie-app/src/services/reviewService.js"],"sourcesContent":["import axios from 'axios'\n\nclass ReviewService {\n  baseURL = 'http://localhost:3001/api/reviews'\n\n  cosntructor() {\n    this.instance = axios.create({ baseUEL: this.baseURL })\n    this.initializeResponseInterceptor()\n  }\n\n  initializeResponseInterceptor() {\n    this.instance.interceptors.response.use(\n      this.handleResponse,\n      this.handleError\n    )\n  }\n\n  handleResponse({ data }) {\n    console.log(data)\n    return data\n  }\n\n  handleError(error) {\n    throw error\n  }\n\n  async getAllReviews() {\n    return await this.isntance.get('/')\n  }\n\n  async createReview(review) {\n    return await this.instance.post('/', {\n      body: review.body,\n      author: review.author,\n    })\n  }\n\n  async deleteReview(id) {\n    return await this.instance.delete(`/${id}`)\n  }\n\n  async updateReview(id, review) {\n    return await this.instance.put('/', {\n      body: review.body,\n      author: review.author,\n    })\n  }\n}\n\nconst reviewService = new ReviewService()\nexport default reviewService\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KAClBC,OAAO,GAAG,mCAAmC;EAAA;EAE7CC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,GAAGL,KAAK,CAACM,MAAM,CAAC;MAAEC,OAAO,EAAE,IAAI,CAACJ;IAAQ,CAAC,CAAC;IACvD,IAAI,CAACK,6BAA6B,EAAE;EACtC;EAEAA,6BAA6BA,CAAA,EAAG;IAC9B,IAAI,CAACH,QAAQ,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CACrC,IAAI,CAACC,cAAc,EACnB,IAAI,CAACC,WAAW,CACjB;EACH;EAEAD,cAAcA,CAAAE,IAAA,EAAW;IAAA,IAAV;MAAEC;IAAK,CAAC,GAAAD,IAAA;IACrBE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,OAAOA,IAAI;EACb;EAEAF,WAAWA,CAACK,KAAK,EAAE;IACjB,MAAMA,KAAK;EACb;EAEA,MAAMC,aAAaA,CAAA,EAAG;IACpB,OAAO,MAAM,IAAI,CAACC,QAAQ,CAACC,GAAG,CAAC,GAAG,CAAC;EACrC;EAEA,MAAMC,YAAYA,CAACC,MAAM,EAAE;IACzB,OAAO,MAAM,IAAI,CAAClB,QAAQ,CAACmB,IAAI,CAAC,GAAG,EAAE;MACnCC,IAAI,EAAEF,MAAM,CAACE,IAAI;MACjBC,MAAM,EAAEH,MAAM,CAACG;IACjB,CAAC,CAAC;EACJ;EAEA,MAAMC,YAAYA,CAACC,EAAE,EAAE;IACrB,OAAO,MAAM,IAAI,CAACvB,QAAQ,CAACwB,MAAM,CAAE,IAAGD,EAAG,EAAC,CAAC;EAC7C;EAEA,MAAME,YAAYA,CAACF,EAAE,EAAEL,MAAM,EAAE;IAC7B,OAAO,MAAM,IAAI,CAAClB,QAAQ,CAAC0B,GAAG,CAAC,GAAG,EAAE;MAClCN,IAAI,EAAEF,MAAM,CAACE,IAAI;MACjBC,MAAM,EAAEH,MAAM,CAACG;IACjB,CAAC,CAAC;EACJ;AACF;AAEA,MAAMM,aAAa,GAAG,IAAI/B,aAAa,EAAE;AACzC,eAAe+B,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}
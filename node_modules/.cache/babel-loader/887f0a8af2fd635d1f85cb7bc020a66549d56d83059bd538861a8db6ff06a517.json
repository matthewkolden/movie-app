{"ast":null,"code":"import { logRoles } from '@testing-library/react';\nimport axios from 'axios';\nclass ReviewService {\n  constructor() {\n    this.baseURL = 'http://localhost:3001/api/reviews';\n    this.instance = axios.create({\n      baseURL: this.baseURL\n    });\n    this.initializeResponseInterceptor();\n  }\n  initializeResponseInterceptor() {\n    this.instance.interceptors.response.use(this.handleResponse, this.handleError);\n  }\n  handleResponse(_ref) {\n    let {\n      data\n    } = _ref;\n    return data;\n  }\n  handleError(error) {\n    throw error;\n  }\n  async getAllReviews() {\n    return await this.instance.get('/');\n  }\n  async createReview(review) {\n    return await this.instance.post('/', {\n      body: review.body,\n      author: review.author,\n      movie: review.movieId\n    });\n  }\n  async deleteReview(id) {\n    return await this.instance.delete(`/${id}`);\n  }\n  async updateReview(id, review) {\n    return await this.instance.put(`/${id}`, {\n      body: review.body,\n      author: review.author\n    });\n  }\n}\nconst reviewService = new ReviewService();\nexport default reviewService;","map":{"version":3,"names":["logRoles","axios","ReviewService","constructor","baseURL","instance","create","initializeResponseInterceptor","interceptors","response","use","handleResponse","handleError","_ref","data","error","getAllReviews","get","createReview","review","post","body","author","movie","movieId","deleteReview","id","delete","updateReview","put","reviewService"],"sources":["/home/matthew/Developer/ga/unit_3/projects/movie-app/src/services/reviewService.js"],"sourcesContent":["import { logRoles } from '@testing-library/react'\nimport axios from 'axios'\n\nclass ReviewService {\n  baseURL = 'http://localhost:3001/api/reviews'\n\n  constructor() {\n    this.instance = axios.create({ baseURL: this.baseURL })\n    this.initializeResponseInterceptor()\n  }\n\n  initializeResponseInterceptor() {\n    this.instance.interceptors.response.use(\n      this.handleResponse,\n      this.handleError\n    )\n  }\n\n  handleResponse({ data }) {\n    return data\n  }\n\n  handleError(error) {\n    throw error\n  }\n\n  async getAllReviews() {\n    return await this.instance.get('/')\n  }\n\n  async createReview(review) {\n    return await this.instance.post('/', {\n      body: review.body,\n      author: review.author,\n      movie: review.movieId,\n    })\n  }\n\n  async deleteReview(id) {\n    return await this.instance.delete(`/${id}`)\n  }\n\n  async updateReview(id, review) {\n    return await this.instance.put(`/${id}`, {\n      body: review.body,\n      author: review.author,\n    })\n  }\n}\n\nconst reviewService = new ReviewService()\nexport default reviewService\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,wBAAwB;AACjD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,CAAC;EAGlBC,WAAWA,CAAA,EAAG;IAAA,KAFdC,OAAO,GAAG,mCAAmC;IAG3C,IAAI,CAACC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC;MAAEF,OAAO,EAAE,IAAI,CAACA;IAAQ,CAAC,CAAC;IACvD,IAAI,CAACG,6BAA6B,EAAE;EACtC;EAEAA,6BAA6BA,CAAA,EAAG;IAC9B,IAAI,CAACF,QAAQ,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CACrC,IAAI,CAACC,cAAc,EACnB,IAAI,CAACC,WAAW,CACjB;EACH;EAEAD,cAAcA,CAAAE,IAAA,EAAW;IAAA,IAAV;MAAEC;IAAK,CAAC,GAAAD,IAAA;IACrB,OAAOC,IAAI;EACb;EAEAF,WAAWA,CAACG,KAAK,EAAE;IACjB,MAAMA,KAAK;EACb;EAEA,MAAMC,aAAaA,CAAA,EAAG;IACpB,OAAO,MAAM,IAAI,CAACX,QAAQ,CAACY,GAAG,CAAC,GAAG,CAAC;EACrC;EAEA,MAAMC,YAAYA,CAACC,MAAM,EAAE;IACzB,OAAO,MAAM,IAAI,CAACd,QAAQ,CAACe,IAAI,CAAC,GAAG,EAAE;MACnCC,IAAI,EAAEF,MAAM,CAACE,IAAI;MACjBC,MAAM,EAAEH,MAAM,CAACG,MAAM;MACrBC,KAAK,EAAEJ,MAAM,CAACK;IAChB,CAAC,CAAC;EACJ;EAEA,MAAMC,YAAYA,CAACC,EAAE,EAAE;IACrB,OAAO,MAAM,IAAI,CAACrB,QAAQ,CAACsB,MAAM,CAAE,IAAGD,EAAG,EAAC,CAAC;EAC7C;EAEA,MAAME,YAAYA,CAACF,EAAE,EAAEP,MAAM,EAAE;IAC7B,OAAO,MAAM,IAAI,CAACd,QAAQ,CAACwB,GAAG,CAAE,IAAGH,EAAG,EAAC,EAAE;MACvCL,IAAI,EAAEF,MAAM,CAACE,IAAI;MACjBC,MAAM,EAAEH,MAAM,CAACG;IACjB,CAAC,CAAC;EACJ;AACF;AAEA,MAAMQ,aAAa,GAAG,IAAI5B,aAAa,EAAE;AACzC,eAAe4B,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}
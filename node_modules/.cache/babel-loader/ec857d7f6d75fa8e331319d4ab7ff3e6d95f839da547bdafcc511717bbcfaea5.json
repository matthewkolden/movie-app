{"ast":null,"code":"var _jsxFileName = \"/home/matthew/Developer/ga/unit_3/projects/movie-app/src/Controller.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport reviewService from './services/reviewService';\nimport { useLocation } from 'react-router-dom';\nimport movieService from './services/movieService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ControllerContext = /*#__PURE__*/createContext({});\nexport function ProvideController(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const provider = useHook();\n  return /*#__PURE__*/_jsxDEV(ControllerContext.Provider, {\n    value: provider,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n_s(ProvideController, \"PwloD2DS4F3ill1c2sVBZWlYLHc=\", false, function () {\n  return [useHook];\n});\n_c = ProvideController;\nexport const useController = () => {\n  _s2();\n  return useContext(ControllerContext);\n};\n_s2(useController, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction useHook() {\n  _s3();\n  const [movies, setMovies] = useState([]);\n  const [movie, setMovie] = useState(null);\n  const API_KEY = '8ec77365';\n  async function getMoviePage(searchTerm) {\n    try {\n      const response = await fetch(`https://www.omdbapi.com/?t=${searchTerm}&apikey=${API_KEY}`);\n      const data = await response.json();\n      setMovie(data);\n      localStorage.setItem('moviePoster', data.Poster); // Store the URL in local storage\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  // Create\n  async function getMovie(searchTerm) {\n    try {\n      const response = await fetch(`https://www.omdbapi.com/?t=${searchTerm}&apikey=${API_KEY}`);\n      const data = await response.json();\n      const newMovie = await movieService.getMovie({\n        title: data.Title,\n        poster: data.Poster,\n        id: data.imdbID,\n        rating: data.Rated\n      });\n      setMovies(oldMovies => [...oldMovies, newMovie]);\n      getAllMovies();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function getAllMovies() {\n    try {\n      const results = await movieService.getAllMovies();\n      setMovies([...results]);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function updateMovie(_id, searchTerm) {\n    try {\n      const response = await fetch(`https://www.omdbapi.com/?t=${searchTerm}&apikey=${API_KEY}`);\n      const data = await response.json();\n      const updatedMovie = await movieService.getMovie({\n        title: data.Title,\n        poster: data.Poster,\n        id: data.imdbID,\n        rating: data.Rated\n      });\n      const results = movieService.updateMovie(_id, updatedMovie);\n      getAllMovies();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function deleteMovie(id) {\n    try {\n      await movieService.deleteMovie(id);\n      const indexToRemove = movies.findIndex(movie => movie._id === id);\n      if (indexToRemove) {\n        const moviesCopy = [...movies];\n        moviesCopy.splice(indexToRemove, 1);\n        setMovies([...moviesCopy]);\n      }\n      getAllMovies();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  const [reviews, setReviews] = useState([]);\n  const location = useLocation();\n  const moviePageLink = location.pathname;\n\n  //\n  async function createReview(review, movie, user) {\n    try {\n      const moviePoster = localStorage.getItem('moviePoster'); // Retrieve the URL from local storage\n      const newReview = await reviewService.createReview(review, movie, moviePoster,\n      // Add the URL to the movie object\n      user._id, moviePageLink);\n      console.log(newReview);\n      console.log(user._id);\n      setReviews(oldReviews => [...oldReviews, newReview]);\n      console.log(reviews);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function getAllReviews() {\n    try {\n      const results = await reviewService.getAllReviews();\n      setReviews([...results]);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function updateReview(id, review, user) {\n    try {\n      const results = await reviewService.updateReview(id, review, user);\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function deleteReview(id) {\n    try {\n      await reviewService.deleteReview(id);\n      const indexToRemove = reviews.findIndex(review => review._id === id);\n      if (indexToRemove) {\n        const reviewCopy = [...reviews];\n        reviewCopy.splice(indexToRemove, 1);\n        setReviews([...reviewCopy]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  useEffect(() => {\n    getAllMovies();\n  }, []);\n  return {\n    movies,\n    setMovies,\n    getMovie,\n    getAllMovies,\n    updateMovie,\n    deleteMovie,\n    getMoviePage,\n    setMovie,\n    movie,\n    createReview,\n    reviews,\n    getAllReviews,\n    updateReview,\n    setReviews,\n    deleteReview,\n    moviePageLink\n  };\n}\n_s3(useHook, \"8g7Bm5ZP424BRuBLikKycjUSuwk=\", false, function () {\n  return [useLocation];\n});\nvar _c;\n$RefreshReg$(_c, \"ProvideController\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","reviewService","useLocation","movieService","jsxDEV","_jsxDEV","ControllerContext","ProvideController","_ref","_s","children","provider","useHook","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useController","_s2","_s3","movies","setMovies","movie","setMovie","API_KEY","getMoviePage","searchTerm","response","fetch","data","json","localStorage","setItem","Poster","error","console","getMovie","newMovie","title","Title","poster","id","imdbID","rating","Rated","oldMovies","getAllMovies","results","updateMovie","_id","updatedMovie","deleteMovie","indexToRemove","findIndex","moviesCopy","splice","reviews","setReviews","location","moviePageLink","pathname","createReview","review","user","moviePoster","getItem","newReview","log","oldReviews","getAllReviews","updateReview","deleteReview","reviewCopy","$RefreshReg$"],"sources":["/home/matthew/Developer/ga/unit_3/projects/movie-app/src/Controller.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react'\nimport reviewService from './services/reviewService'\nimport { useLocation } from 'react-router-dom'\nimport movieService from './services/movieService'\n\nconst ControllerContext = createContext({})\n\nexport function ProvideController({ children }) {\n  const provider = useHook()\n  return (\n    <ControllerContext.Provider value={provider}>\n      {children}\n    </ControllerContext.Provider>\n  )\n}\n\nexport const useController = () => {\n  return useContext(ControllerContext)\n}\n\nfunction useHook() {\n  const [movies, setMovies] = useState([])\n  const [movie, setMovie] = useState(null)\n\n  const API_KEY = '8ec77365'\n\n  async function getMoviePage(searchTerm) {\n    try {\n      const response = await fetch(\n        `https://www.omdbapi.com/?t=${searchTerm}&apikey=${API_KEY}`\n      )\n      const data = await response.json()\n      setMovie(data)\n      localStorage.setItem('moviePoster', data.Poster) // Store the URL in local storage\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  // Create\n  async function getMovie(searchTerm) {\n    try {\n      const response = await fetch(\n        `https://www.omdbapi.com/?t=${searchTerm}&apikey=${API_KEY}`\n      )\n      const data = await response.json()\n      const newMovie = await movieService.getMovie({\n        title: data.Title,\n        poster: data.Poster,\n        id: data.imdbID,\n        rating: data.Rated,\n      })\n      setMovies((oldMovies) => [...oldMovies, newMovie])\n      getAllMovies()\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function getAllMovies() {\n    try {\n      const results = await movieService.getAllMovies()\n      setMovies([...results])\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function updateMovie(_id, searchTerm) {\n    try {\n      const response = await fetch(\n        `https://www.omdbapi.com/?t=${searchTerm}&apikey=${API_KEY}`\n      )\n      const data = await response.json()\n      const updatedMovie = await movieService.getMovie({\n        title: data.Title,\n        poster: data.Poster,\n        id: data.imdbID,\n        rating: data.Rated,\n      })\n      const results = movieService.updateMovie(_id, updatedMovie)\n      getAllMovies()\n      return results\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function deleteMovie(id) {\n    try {\n      await movieService.deleteMovie(id)\n      const indexToRemove = movies.findIndex((movie) => movie._id === id)\n      if (indexToRemove) {\n        const moviesCopy = [...movies]\n        moviesCopy.splice(indexToRemove, 1)\n        setMovies([...moviesCopy])\n      }\n      getAllMovies()\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const [reviews, setReviews] = useState([])\n  const location = useLocation()\n  const moviePageLink = location.pathname\n\n  //\n  async function createReview(review, movie, user) {\n    try {\n      const moviePoster = localStorage.getItem('moviePoster') // Retrieve the URL from local storage\n      const newReview = await reviewService.createReview(\n        review,\n        movie,\n        moviePoster, // Add the URL to the movie object\n        user._id,\n        moviePageLink\n      )\n      console.log(newReview)\n      console.log(user._id)\n      setReviews((oldReviews) => [...oldReviews, newReview])\n      console.log(reviews)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function getAllReviews() {\n    try {\n      const results = await reviewService.getAllReviews()\n      setReviews([...results])\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function updateReview(id, review, user) {\n    try {\n      const results = await reviewService.updateReview(id, review, user)\n      return results\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function deleteReview(id) {\n    try {\n      await reviewService.deleteReview(id)\n      const indexToRemove = reviews.findIndex((review) => review._id === id)\n      if (indexToRemove) {\n        const reviewCopy = [...reviews]\n        reviewCopy.splice(indexToRemove, 1)\n        setReviews([...reviewCopy])\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  useEffect(() => {\n    getAllMovies()\n  }, [])\n\n  return {\n    movies,\n    setMovies,\n    getMovie,\n    getAllMovies,\n    updateMovie,\n    deleteMovie,\n    getMoviePage,\n    setMovie,\n    movie,\n    createReview,\n    reviews,\n    getAllReviews,\n    updateReview,\n    setReviews,\n    deleteReview,\n    moviePageLink,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/matthew/Developer/ga/unit_3/projects/movie-app/src/Controller.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport reviewService from './services/reviewService';\nimport movieService from './services/movieService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ControllerContext = /*#__PURE__*/createContext({});\nexport function ProvideController(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const provider = useHook();\n  return /*#__PURE__*/_jsxDEV(ControllerContext.Provider, {\n    value: provider,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n_s(ProvideController, \"PwloD2DS4F3ill1c2sVBZWlYLHc=\", false, function () {\n  return [useHook];\n});\n_c = ProvideController;\nexport const useController = () => {\n  _s2();\n  return useContext(ControllerContext);\n};\n_s2(useController, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction useHook() {\n  _s3();\n  const [movies, setMovies] = useState([]);\n  const [movie, setMovie] = useState(null);\n  const API_KEY = '8ec77365';\n  async function getMoviePage(searchTerm) {\n    try {\n      const response = await fetch(`https://www.omdbapi.com/?t=${searchTerm}&apikey=${API_KEY}`);\n      const data = await response.json();\n      setMovie(data);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function getMovie(searchTerm) {\n    try {\n      const response = await fetch(`https://www.omdbapi.com/?t=${searchTerm}&apikey=${API_KEY}`);\n      const data = await response.json();\n      const movie = {\n        title: data.Title,\n        poster: data.Poster,\n        id: data.imdbID,\n        rating: data.Rated\n      };\n      const newMovie = await movieService.createMovie(movie);\n      setMovies(oldMovies => [...oldMovies, newMovie]);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function getAllMovies() {\n    try {\n      const results = await movieService.getAllMovies();\n      setMovies([...results]);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function updateMovie(id, completed) {\n    try {\n      const results = await movieService.updateMovie(id, completed);\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function deleteMovie(id) {\n    try {\n      await movieService.deleteMovie(id);\n      const indexToRemove = movies.findIndex(movie => movie._id === id);\n      if (indexToRemove) {\n        const moviesCopy = [...movies];\n        moviesCopy.splice(indexToRemove, 1);\n        setMovies([...moviesCopy]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  const [reviews, setReviews] = useState([]);\n  async function createReview(review, movie, user) {\n    try {\n      const newReview = await reviewService.createReview(review, movie, user._id);\n      console.log(newReview);\n      console.log(user._id);\n      setReviews(oldReviews => [...oldReviews, newReview]);\n      console.log(reviews);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function getAllReviews() {\n    try {\n      const results = await reviewService.getAllReviews();\n      setReviews([...results]);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function updateReview(id, review, user) {\n    try {\n      const results = await reviewService.updateReview(id, review, user);\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function deleteReview(id) {\n    try {\n      await reviewService.deleteReview(id);\n      const indexToRemove = reviews.findIndex(review => review._id === id);\n      if (indexToRemove) {\n        const reviewCopy = [...reviews];\n        reviewCopy.splice(indexToRemove, 1);\n        setReviews([...reviewCopy]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  useEffect(() => {\n    const searchTerms = ['Ant-man and the wasp: quantumania', 'Die Hard', 'Avatar: The Way of Water', 'Cocaine Bear'];\n    searchTerms.forEach(searchTerm => {\n      getMovie(searchTerm);\n    });\n  }, []);\n  return {\n    movies,\n    setMovies,\n    getMovie,\n    getAllMovies,\n    updateMovie,\n    deleteMovie,\n    getMoviePage,\n    setMovie,\n    movie,\n    createReview,\n    reviews,\n    getAllReviews,\n    updateReview,\n    setReviews,\n    deleteReview\n  };\n}\n_s3(useHook, \"UTkv76A/ouWRCGv/1FVwKS0iG9w=\");\nvar _c;\n$RefreshReg$(_c, \"ProvideController\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","reviewService","movieService","jsxDEV","_jsxDEV","ControllerContext","ProvideController","_ref","_s","children","provider","useHook","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useController","_s2","_s3","movies","setMovies","movie","setMovie","API_KEY","getMoviePage","searchTerm","response","fetch","data","json","error","console","getMovie","title","Title","poster","Poster","id","imdbID","rating","Rated","newMovie","createMovie","oldMovies","getAllMovies","results","updateMovie","completed","deleteMovie","indexToRemove","findIndex","_id","moviesCopy","splice","reviews","setReviews","createReview","review","user","newReview","log","oldReviews","getAllReviews","updateReview","deleteReview","reviewCopy","searchTerms","forEach","$RefreshReg$"],"sources":["/home/matthew/Developer/ga/unit_3/projects/movie-app/src/Controller.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react'\nimport reviewService from './services/reviewService'\nimport movieService from './services/movieService'\nconst ControllerContext = createContext({})\n\nexport function ProvideController({ children }) {\n  const provider = useHook()\n  return (\n    <ControllerContext.Provider value={provider}>\n      {children}\n    </ControllerContext.Provider>\n  )\n}\n\nexport const useController = () => {\n  return useContext(ControllerContext)\n}\n\nfunction useHook() {\n  const [movies, setMovies] = useState([])\n  const [movie, setMovie] = useState(null)\n\n  const API_KEY = '8ec77365'\n\n  async function getMoviePage(searchTerm) {\n    try {\n      const response = await fetch(\n        `https://www.omdbapi.com/?t=${searchTerm}&apikey=${API_KEY}`\n      )\n      const data = await response.json()\n      setMovie(data)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function getMovie(searchTerm) {\n    try {\n      const response = await fetch(\n        `https://www.omdbapi.com/?t=${searchTerm}&apikey=${API_KEY}`\n      )\n      const data = await response.json()\n      const movie = {\n        title: data.Title,\n        poster: data.Poster,\n        id: data.imdbID,\n        rating: data.Rated,\n      }\n      const newMovie = await movieService.createMovie(movie)\n      setMovies((oldMovies) => [...oldMovies, newMovie])\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function getAllMovies() {\n    try {\n      const results = await movieService.getAllMovies()\n      setMovies([...results])\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function updateMovie(id, completed) {\n    try {\n      const results = await movieService.updateMovie(id, completed)\n      return results\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function deleteMovie(id) {\n    try {\n      await movieService.deleteMovie(id)\n      const indexToRemove = movies.findIndex((movie) => movie._id === id)\n      if (indexToRemove) {\n        const moviesCopy = [...movies]\n        moviesCopy.splice(indexToRemove, 1)\n        setMovies([...moviesCopy])\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const [reviews, setReviews] = useState([])\n\n  async function createReview(review, movie, user) {\n    try {\n      const newReview = await reviewService.createReview(\n        review,\n        movie,\n        user._id\n      )\n      console.log(newReview)\n      console.log(user._id)\n      setReviews((oldReviews) => [...oldReviews, newReview])\n      console.log(reviews)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function getAllReviews() {\n    try {\n      const results = await reviewService.getAllReviews()\n      setReviews([...results])\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function updateReview(id, review, user) {\n    try {\n      const results = await reviewService.updateReview(id, review, user)\n      return results\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function deleteReview(id) {\n    try {\n      await reviewService.deleteReview(id)\n      const indexToRemove = reviews.findIndex((review) => review._id === id)\n      if (indexToRemove) {\n        const reviewCopy = [...reviews]\n        reviewCopy.splice(indexToRemove, 1)\n        setReviews([...reviewCopy])\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  useEffect(() => {\n    const searchTerms = [\n      'Ant-man and the wasp: quantumania',\n      'Die Hard',\n      'Avatar: The Way of Water',\n      'Cocaine Bear',\n    ]\n    searchTerms.forEach((searchTerm) => {\n      getMovie(searchTerm)\n    })\n  }, [])\n\n  return {\n    movies,\n    setMovies,\n    getMovie,\n    getAllMovies,\n    updateMovie,\n    deleteMovie,\n    getMoviePage,\n    setMovie,\n    movie,\n    createReview,\n    reviews,\n    getAllReviews,\n    updateReview,\n    setReviews,\n    deleteReview,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}